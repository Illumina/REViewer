//
// REViewer
// Copyright 2020 Illumina, Inc.
//
// Author: Egor Dolzhenko <edolzhenko@illumina.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#include <iostream>
#include <string>

#include <boost/optional.hpp>
#include <boost/program_options.hpp>

#include "spdlog/sinks/basic_file_sink.h"
#include "spdlog/spdlog.h"

#include "Workflow.hh"

using boost::optional;
using std::string;

namespace po = boost::program_options;

optional<WorkflowArguments> getCommandLineArguments(int argc, char** argv)
{
    WorkflowArguments args;

    // clang-format off
    po::options_description options("Program options");
    options.add_options()
            ("help", "Print help message")
            ("version", "Print version number")
            ("reads", po::value<string>(&args.readsPath)->required(), "BAMlet generated by ExpansionHunter")
            ("vcf", po::value<string>(&args.vcfPath)->required(), "VCF file generated by ExpansionHunter")
            ("reference", po::value<string>(&args.referencePath)->required(), "FASTA file with reference genome")
            ("catalog", po::value<string>(&args.catalogPath)->required(), "Variant catalog")
            ("locus", po::value<string>(&args.locusId)->required(), "Locus to analyze (or a list of comma-separated loci)")
            ("output-phasing-info", po::bool_switch(&args.outputPhasingInfo), "Output results of the haplotype estimation algorithm")
            ("output-prefix", po::value<string>(&args.outputPrefix)->required(), "Prefix for the output files");
    // clang-format on

    if (argc == 1)
    {
        std::cerr << options << std::endl;
        return boost::none;
    }

    po::variables_map argumentMap;
    po::store(po::command_line_parser(argc, argv).options(options).run(), argumentMap);

    if (argumentMap.count("help"))
    {
        std::cerr << options << std::endl;
        return boost::none;
    }

    if (argumentMap.count("version"))
    {
        std::cerr << "REViewer v0.2.1" << std::endl;
        return boost::none;
    }

    po::notify(argumentMap);

    return args;
}

int main(int argc, char** argv)
{
    try
    {
        optional<WorkflowArguments> arguments = getCommandLineArguments(argc, argv);
        if (arguments)
        {
            return runWorkflow(*arguments);
        }
    }
    catch (const std::exception& exception)
    {
        spdlog::error(exception.what());
        return 1;
    }

    return 0;
}
